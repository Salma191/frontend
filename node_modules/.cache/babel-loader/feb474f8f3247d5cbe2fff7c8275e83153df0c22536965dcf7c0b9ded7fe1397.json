{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\lenovo\\\\Downloads\\\\paper-dashboard-react\\\\src\\\\Professors\\\\views\\\\PWManagement.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport { Card, CardHeader, CardBody, Row, Col } from 'reactstrap';\nimport DataTable from 'react-data-table-component';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction PWManagement() {\n  _s();\n  const [pws, setPWs] = useState([]);\n  const [groups, setGroups] = useState([]);\n  const [formData, setFormData] = useState({\n    id: null,\n    name: '',\n    groupIds: []\n  });\n  const [groupedPWs, setGroupedPWs] = useState({});\n  const [selectedGroupId, setSelectedGroupId] = useState(null);\n  const [selectedPWId, setSelectedPWId] = useState(null);\n  const [toothOptions, setToothOptions] = useState([]);\n  const [formDataT, setFormDataT] = useState({\n    name: ''\n  });\n  const [groupOptions, setGroupOptions] = useState([]);\n  const [formDataG, setFormDataG] = useState({\n    name: ''\n  });\n  useEffect(() => {\n    fetchPWs();\n    fetchGroups();\n  }, []);\n  const fetchPWs = async () => {\n    try {\n      const response = await axios.get('http://localhost:8082/api/pws');\n      setPWs(response.data);\n\n      // Update groupedPWs\n      const updatedGroupedPWs = {};\n      response.data.forEach(pw => {\n        if (pw.groupIds) {\n          pw.groupIds.forEach(groupId => {\n            if (!updatedGroupedPWs[groupId]) {\n              updatedGroupedPWs[groupId] = [];\n            }\n            updatedGroupedPWs[groupId].push(pw);\n          });\n        }\n      });\n      setGroupedPWs(updatedGroupedPWs);\n    } catch (error) {\n      console.error('Error fetching PWs:', error);\n    }\n  };\n  const fetchGroups = async () => {\n    try {\n      const response = await axios.get('http://localhost:8082/api/groupes');\n      setGroups(response.data);\n    } catch (error) {\n      console.error('Error fetching groups:', error);\n    }\n  };\n  useEffect(() => {\n    // Récupérer les données des dents depuis la base de données\n    axios.get('http://localhost:8082/api/teeth').then(response => {\n      // Mettre à jour les options de la liste déroulante avec les données reçues\n      setToothOptions(response.data); // Assurez-vous que response.data contient les données des dents\n    }).catch(error => {\n      // Gérer les erreurs de requête\n      console.error('Error fetching tooth data:', error);\n    });\n  }, []);\n  const createOrUpdatePW = async () => {\n    try {\n      var _toothOptions$find;\n      const toothId = (_toothOptions$find = toothOptions.find(tooth => tooth.name === formDataT.name)) === null || _toothOptions$find === void 0 ? void 0 : _toothOptions$find.id;\n\n      // Utilise l'ID de la dent dans les données à envoyer au backend\n      const pwData = {\n        id: formData.id,\n        name: formData.name,\n        groupIds: formData.groupIds,\n        toothId: toothId // Ajoute l'ID de la dent à envoyer avec le mot de passe\n      };\n\n      // Si l'ID de la dent est trouvé, utilise-le dans les données à envoyer\n      if (toothId) {\n        pwData.toothId = toothId;\n      }\n      if (formData.id) {\n        // Update PW\n        await axios.put(\"http://localhost:8082/api/pws/\".concat(formData.id), pwData);\n      } else {\n        // Create new PW\n        const response = await axios.post('http://localhost:8082/api/pws', pwData);\n\n        // Update groupedPWs\n        const updatedGroupedPWs = {\n          ...groupedPWs\n        };\n        formData.groupIds.forEach(groupId => {\n          if (!updatedGroupedPWs[groupId]) {\n            updatedGroupedPWs[groupId] = [];\n          }\n          updatedGroupedPWs[groupId].push(response.data);\n        });\n        setGroupedPWs(updatedGroupedPWs);\n      }\n\n      // Clear the form data\n      setFormData({\n        id: null,\n        name: '',\n        groupIds: []\n      });\n\n      // Refresh the PW data\n      fetchPWs();\n    } catch (error) {\n      console.error('Error creating/updating PW:', error);\n    }\n  };\n  const deletePW = async id => {\n    try {\n      await axios.delete('http://localhost:8082/api/pws/${id}');\n      fetchPWs();\n    } catch (error) {\n      console.error('Error deleting PW:', error);\n    }\n  };\n  const handleEdit = pw => {\n    // Set the form data for editing\n    const groupIds = pw.groupIds ? pw.groupIds.map(group => group.id) : [];\n    setFormData({\n      id: pw.id,\n      name: pw.name,\n      groupIds\n    });\n  };\n  const handleInputChange = e => {\n    const {\n      name,\n      value\n    } = e.target;\n    setFormData({\n      ...formData,\n      [name]: value\n    });\n  };\n  const handleInputChangeTooth = e => {\n    setFormDataT({\n      ...formDataT,\n      [e.target.name]: e.target.value\n    });\n  };\n  const handleGroupCheckboxChange = groupId => {\n    const updatedGroupIds = (formData.groupIds || []).includes(groupId) ? (formData.groupIds || []).filter(id => id !== groupId) : [...(formData.groupIds || []), groupId];\n    setFormData({\n      ...formData,\n      groupIds: updatedGroupIds\n    });\n  };\n  const handlePWCheckboxChange = pwId => {\n    const updatedPWIds = (formData.pwIds || []).includes(pwId) ? (formData.pwIds || []).filter(id => id !== pwId) : [...(formData.pwIds || []), pwId];\n    setFormData({\n      ...formData,\n      pwIds: updatedPWIds\n    });\n  };\n  const columns = [{\n    name: 'Name',\n    selector: 'name',\n    sortable: true\n  }, {\n    name: 'Tooth',\n    // Nom de la colonne\n    selector: 'toothName',\n    // Nom du champ dans vos données\n    sortable: true\n  }, {\n    name: 'Edit',\n    cell: row => /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => handleEdit(row),\n      children: \"Edit\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 166,\n      columnNumber: 11\n    }, this),\n    button: true\n  }, {\n    name: 'Delete',\n    cell: row => /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => deletePW(row.id),\n      children: \"Delete\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 173,\n      columnNumber: 11\n    }, this),\n    button: true\n  }];\n  const handleGroupSelectionChange = groupId => {\n    setSelectedGroupId(groupId);\n  };\n  const handlePWSelectionChange = pwId => {\n    setSelectedPWId(pwId);\n  };\n  const addPWToGroup = async () => {\n    try {\n      // Vérifiez que les ID sont sélectionnés\n      if (!selectedGroupId || !selectedPWId) {\n        console.error('Both group and password must be selected');\n        return;\n      }\n\n      // Effectuez l'appel HTTP pour ajouter le pw au groupe\n      await axios.post('http://localhost:8082/api/groupes/${selectedGroupId}/add-pw/${selectedPWId}');\n\n      // Mettez à jour les données après l'ajout\n      fetchPWs(); // Mettez à jour la liste des mots de passe\n      fetchGroups(); // Mettez à jour la liste des groupes\n    } catch (error) {\n      console.error('Error adding password to group:', error);\n    }\n  };\n  const removePWFromGroup = async () => {\n    try {\n      // Vérifiez que les ID sont sélectionnés\n      if (!selectedGroupId || !selectedPWId) {\n        console.error('Both group and password must be selected');\n        return;\n      }\n\n      // Effectuez l'appel HTTP pour supprimer le pw du groupe\n      await axios.delete('http://localhost:8082/api/groupes/${selectedGroupId}/remove-pw/${selectedPWId}');\n\n      // Mettez à jour les données après la suppression\n      fetchPWs(); // Mettez à jour la liste des mots de passe\n      fetchGroups(); // Mettez à jour la liste des groupes\n    } catch (error) {\n      console.error('Error removing password from group:', error);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"content\",\n      children: /*#__PURE__*/_jsxDEV(Row, {\n        children: /*#__PURE__*/_jsxDEV(Col, {\n          md: \"12\",\n          children: /*#__PURE__*/_jsxDEV(Card, {\n            children: [/*#__PURE__*/_jsxDEV(CardHeader, {\n              children: \"PW Management\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 233,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(CardBody, {\n              children: [/*#__PURE__*/_jsxDEV(\"form\", {\n                children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                  children: [\"PW Name:\", /*#__PURE__*/_jsxDEV(\"input\", {\n                    type: \"text\",\n                    name: \"name\",\n                    value: formData.name,\n                    onChange: handleInputChange\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 238,\n                    columnNumber: 23\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 236,\n                  columnNumber: 21\n                }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n                  children: [\"Tooth Name:\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 247,\n                    columnNumber: 23\n                  }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n                    id: \"toothName\",\n                    name: \"toothName\",\n                    value: formDataT.name,\n                    onChange: handleInputChangeTooth,\n                    children: [/*#__PURE__*/_jsxDEV(\"option\", {\n                      value: \"\",\n                      children: \"Select a tooth\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 254,\n                      columnNumber: 25\n                    }, this), toothOptions.map(tooth => /*#__PURE__*/_jsxDEV(\"option\", {\n                      value: tooth.name,\n                      children: tooth.name\n                    }, tooth.id, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 256,\n                      columnNumber: 29\n                    }, this))]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 248,\n                    columnNumber: 23\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 245,\n                  columnNumber: 21\n                }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n                  children: [\"Group Name:\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 264,\n                    columnNumber: 23\n                  }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n                    id: \"groupName\",\n                    name: \"groupName\",\n                    value: formDataG.name\n                    // onChange={handleInputChangeGroup}\n                    ,\n                    children: [/*#__PURE__*/_jsxDEV(\"option\", {\n                      value: \"\",\n                      children: \"Select a group\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 271,\n                      columnNumber: 25\n                    }, this), groups.map(group => /*#__PURE__*/_jsxDEV(\"option\", {\n                      value: group.name,\n                      children: group.code\n                    }, group.id, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 273,\n                      columnNumber: 29\n                    }, this))]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 265,\n                    columnNumber: 23\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 262,\n                  columnNumber: 21\n                }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                  type: \"button\",\n                  onClick: createOrUpdatePW,\n                  children: formData.id ? 'Update PW' : 'Add PW'\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 293,\n                  columnNumber: 21\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 235,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(DataTable, {\n                title: \"PWs\",\n                columns: columns,\n                data: pws,\n                pagination: true,\n                highlightOnHover: true,\n                className: \"table table-striped table-bordered\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 298,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n                  children: \"Assign Passwords to Groups:\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 309,\n                  columnNumber: 21\n                }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"mb-2\",\n                  children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                    className: \"me-2\",\n                    children: \"Select Group:\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 313,\n                    columnNumber: 23\n                  }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n                    className: \"form-select\",\n                    value: selectedGroupId || '',\n                    onChange: e => handleGroupSelectionChange(e.target.value),\n                    children: [/*#__PURE__*/_jsxDEV(\"option\", {\n                      value: null,\n                      children: \"Select Group\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 319,\n                      columnNumber: 25\n                    }, this), groups.map(g => /*#__PURE__*/_jsxDEV(\"option\", {\n                      value: g.id,\n                      children: g.code\n                    }, g.id, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 321,\n                      columnNumber: 29\n                    }, this))]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 314,\n                    columnNumber: 23\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 312,\n                  columnNumber: 21\n                }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"mb-2\",\n                  children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                    className: \"me-2\",\n                    children: \"Select PW:\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 326,\n                    columnNumber: 23\n                  }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n                    className: \"form-select\",\n                    value: selectedPWId || '',\n                    onChange: e => handlePWSelectionChange(e.target.value),\n                    children: [/*#__PURE__*/_jsxDEV(\"option\", {\n                      value: null,\n                      children: \"Select Password\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 332,\n                      columnNumber: 25\n                    }, this), pws.map(pw => /*#__PURE__*/_jsxDEV(\"option\", {\n                      value: pw.id,\n                      children: pw.name\n                    }, pw.id, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 334,\n                      columnNumber: 29\n                    }, this))]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 327,\n                    columnNumber: 23\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 325,\n                  columnNumber: 21\n                }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                  children: /*#__PURE__*/_jsxDEV(\"button\", {\n                    type: \"button\",\n                    className: \"btn btn-primary me-2\",\n                    onClick: () => {\n                      createOrUpdatePW(); // Create or update PW\n                      addPWToGroup(); // Assign password to group\n                    },\n                    children: \"Add Password\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 339,\n                    columnNumber: 23\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 338,\n                  columnNumber: 21\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 308,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n                  children: \"Assigned PWs to Groups:\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 353,\n                  columnNumber: 21\n                }, this), groups.map(group => /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"mb-3\",\n                  children: [/*#__PURE__*/_jsxDEV(\"h5\", {\n                    children: [group.code, \":\"]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 356,\n                    columnNumber: 27\n                  }, this), groupedPWs[group.id] && groupedPWs[group.id].length > 0 ? /*#__PURE__*/_jsxDEV(\"ul\", {\n                    children: groupedPWs[group.id].map(pw => /*#__PURE__*/_jsxDEV(\"li\", {\n                      children: pw.name\n                    }, pw.id, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 360,\n                      columnNumber: 37\n                    }, this))\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 358,\n                    columnNumber: 31\n                  }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n                    children: \"None\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 364,\n                    columnNumber: 31\n                  }, this)]\n                }, group.id, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 355,\n                  columnNumber: 25\n                }, this))]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 352,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 234,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 232,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 231,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 230,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 229,\n      columnNumber: 9\n    }, this)\n  }, void 0, false);\n}\n_s(PWManagement, \"37cKtNddLN8knp/BCJEzfbgEzRE=\");\n_c = PWManagement;\nexport default PWManagement;\nvar _c;\n$RefreshReg$(_c, \"PWManagement\");","map":{"version":3,"names":["React","useState","useEffect","axios","Card","CardHeader","CardBody","Row","Col","DataTable","jsxDEV","_jsxDEV","Fragment","_Fragment","PWManagement","_s","pws","setPWs","groups","setGroups","formData","setFormData","id","name","groupIds","groupedPWs","setGroupedPWs","selectedGroupId","setSelectedGroupId","selectedPWId","setSelectedPWId","toothOptions","setToothOptions","formDataT","setFormDataT","groupOptions","setGroupOptions","formDataG","setFormDataG","fetchPWs","fetchGroups","response","get","data","updatedGroupedPWs","forEach","pw","groupId","push","error","console","then","catch","createOrUpdatePW","_toothOptions$find","toothId","find","tooth","pwData","put","concat","post","deletePW","delete","handleEdit","map","group","handleInputChange","e","value","target","handleInputChangeTooth","handleGroupCheckboxChange","updatedGroupIds","includes","filter","handlePWCheckboxChange","pwId","updatedPWIds","pwIds","columns","selector","sortable","cell","row","onClick","children","fileName","_jsxFileName","lineNumber","columnNumber","button","handleGroupSelectionChange","handlePWSelectionChange","addPWToGroup","removePWFromGroup","className","md","type","onChange","code","title","pagination","highlightOnHover","g","length","_c","$RefreshReg$"],"sources":["C:/Users/lenovo/Downloads/paper-dashboard-react/src/Professors/views/PWManagement.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport axios from 'axios';\r\nimport { Card, CardHeader, CardBody, Row, Col } from 'reactstrap';\r\nimport DataTable from 'react-data-table-component';\r\n\r\nfunction PWManagement() {\r\n  const [pws, setPWs] = useState([]);\r\n  const [groups, setGroups] = useState([]);\r\n  const [formData, setFormData] = useState({ id: null, name: '', groupIds: [] });\r\n  const [groupedPWs, setGroupedPWs] = useState({});\r\n  const [selectedGroupId, setSelectedGroupId] = useState(null);\r\n  const [selectedPWId, setSelectedPWId] = useState(null);\r\n  const [toothOptions, setToothOptions] = useState([]);\r\n  const [formDataT, setFormDataT] = useState({ name: '' });\r\n  const [groupOptions, setGroupOptions] = useState([]);\r\n  const [formDataG, setFormDataG] = useState({ name: '' });\r\n\r\n  useEffect(() => {\r\n    fetchPWs();\r\n    fetchGroups();\r\n  }, []);\r\n\r\n  const fetchPWs = async () => {\r\n    try {\r\n      const response = await axios.get('http://localhost:8082/api/pws');\r\n      setPWs(response.data);\r\n\r\n      // Update groupedPWs\r\n      const updatedGroupedPWs = {};\r\n      response.data.forEach(pw => {\r\n        if (pw.groupIds) {\r\n          pw.groupIds.forEach(groupId => {\r\n            if (!updatedGroupedPWs[groupId]) {\r\n              updatedGroupedPWs[groupId] = [];\r\n            }\r\n            updatedGroupedPWs[groupId].push(pw);\r\n          });\r\n        }\r\n      });\r\n      setGroupedPWs(updatedGroupedPWs);\r\n    } catch (error) {\r\n      console.error('Error fetching PWs:', error);\r\n    }\r\n  };\r\n\r\n  const fetchGroups = async () => {\r\n    try {\r\n      const response = await axios.get('http://localhost:8082/api/groupes');\r\n      setGroups(response.data);\r\n    } catch (error) {\r\n      console.error('Error fetching groups:', error);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    // Récupérer les données des dents depuis la base de données\r\n    axios.get('http://localhost:8082/api/teeth')\r\n        .then(response => {\r\n          // Mettre à jour les options de la liste déroulante avec les données reçues\r\n          setToothOptions(response.data); // Assurez-vous que response.data contient les données des dents\r\n        })\r\n        .catch(error => {\r\n          // Gérer les erreurs de requête\r\n          console.error('Error fetching tooth data:', error);\r\n        });\r\n  }, []);\r\n\r\n  const createOrUpdatePW = async () => {\r\n    try {\r\n      const toothId = toothOptions.find(tooth => tooth.name === formDataT.name)?.id;\r\n\r\n      // Utilise l'ID de la dent dans les données à envoyer au backend\r\n      const pwData = {\r\n        id: formData.id,\r\n        name: formData.name,\r\n        groupIds: formData.groupIds,\r\n        toothId: toothId, // Ajoute l'ID de la dent à envoyer avec le mot de passe\r\n      };\r\n\r\n      // Si l'ID de la dent est trouvé, utilise-le dans les données à envoyer\r\n      if (toothId) {\r\n        pwData.toothId = toothId;\r\n      }\r\n\r\n      if (formData.id) {\r\n        // Update PW\r\n        await axios.put(`http://localhost:8082/api/pws/${formData.id}`, pwData);\r\n      } else {\r\n        // Create new PW\r\n        const response = await axios.post('http://localhost:8082/api/pws', pwData);\r\n\r\n        // Update groupedPWs\r\n        const updatedGroupedPWs = { ...groupedPWs };\r\n        formData.groupIds.forEach(groupId => {\r\n          if (!updatedGroupedPWs[groupId]) {\r\n            updatedGroupedPWs[groupId] = [];\r\n          }\r\n          updatedGroupedPWs[groupId].push(response.data);\r\n        });\r\n        setGroupedPWs(updatedGroupedPWs);\r\n      }\r\n\r\n      // Clear the form data\r\n      setFormData({ id: null, name: '', groupIds: [] });\r\n\r\n      // Refresh the PW data\r\n      fetchPWs();\r\n    } catch (error) {\r\n      console.error('Error creating/updating PW:', error);\r\n    }\r\n  };\r\n\r\n\r\n  const deletePW = async (id) => {\r\n    try {\r\n      await axios.delete('http://localhost:8082/api/pws/${id}');\r\n      fetchPWs();\r\n    } catch (error) {\r\n      console.error('Error deleting PW:', error);\r\n    }\r\n  };\r\n\r\n  const handleEdit = (pw) => {\r\n    // Set the form data for editing\r\n    const groupIds = pw.groupIds ? pw.groupIds.map(group => group.id) : [];\r\n    setFormData({ id: pw.id, name: pw.name, groupIds });\r\n  };\r\n\r\n  const handleInputChange = (e) => {\r\n    const { name, value } = e.target;\r\n    setFormData({ ...formData, [name]: value });\r\n  };\r\n\r\n  const handleInputChangeTooth = (e) => {\r\n    setFormDataT({ ...formDataT, [e.target.name]: e.target.value });\r\n  };\r\n\r\n  const handleGroupCheckboxChange = (groupId) => {\r\n    const updatedGroupIds = (formData.groupIds || []).includes(groupId)\r\n        ? (formData.groupIds || []).filter(id => id !== groupId)\r\n        : [...(formData.groupIds || []), groupId];\r\n\r\n    setFormData({ ...formData, groupIds: updatedGroupIds });\r\n  };\r\n\r\n  const handlePWCheckboxChange = (pwId) => {\r\n    const updatedPWIds = (formData.pwIds || []).includes(pwId)\r\n        ? (formData.pwIds || []).filter(id => id !== pwId)\r\n        : [...(formData.pwIds || []), pwId];\r\n    setFormData({ ...formData, pwIds: updatedPWIds });\r\n  };\r\n\r\n  const columns = [\r\n    {\r\n      name: 'Name',\r\n      selector: 'name',\r\n      sortable: true,\r\n    },{\r\n      name: 'Tooth', // Nom de la colonne\r\n      selector: 'toothName', // Nom du champ dans vos données\r\n      sortable: true,\r\n    },\r\n    {\r\n      name: 'Edit',\r\n      cell: (row) => (\r\n          <button onClick={() => handleEdit(row)}>Edit</button>\r\n      ),\r\n      button: true,\r\n    },\r\n    {\r\n      name: 'Delete',\r\n      cell: (row) => (\r\n          <button onClick={() => deletePW(row.id)}>Delete</button>\r\n      ),\r\n      button: true,\r\n    },\r\n  ];\r\n\r\n  const handleGroupSelectionChange = (groupId) => {\r\n    setSelectedGroupId(groupId);\r\n  };\r\n\r\n  const handlePWSelectionChange = (pwId) => {\r\n    setSelectedPWId(pwId);\r\n  };\r\n\r\n  const addPWToGroup = async () => {\r\n    try {\r\n      // Vérifiez que les ID sont sélectionnés\r\n      if (!selectedGroupId || !selectedPWId) {\r\n        console.error('Both group and password must be selected');\r\n        return;\r\n      }\r\n\r\n      // Effectuez l'appel HTTP pour ajouter le pw au groupe\r\n      await axios.post('http://localhost:8082/api/groupes/${selectedGroupId}/add-pw/${selectedPWId}');\r\n\r\n      // Mettez à jour les données après l'ajout\r\n      fetchPWs(); // Mettez à jour la liste des mots de passe\r\n      fetchGroups(); // Mettez à jour la liste des groupes\r\n    } catch (error) {\r\n      console.error('Error adding password to group:', error);\r\n    }\r\n  };\r\n\r\n  const removePWFromGroup = async () => {\r\n    try {\r\n      // Vérifiez que les ID sont sélectionnés\r\n      if (!selectedGroupId || !selectedPWId) {\r\n        console.error('Both group and password must be selected');\r\n        return;\r\n      }\r\n\r\n      // Effectuez l'appel HTTP pour supprimer le pw du groupe\r\n      await axios.delete('http://localhost:8082/api/groupes/${selectedGroupId}/remove-pw/${selectedPWId}');\r\n\r\n      // Mettez à jour les données après la suppression\r\n      fetchPWs(); // Mettez à jour la liste des mots de passe\r\n      fetchGroups(); // Mettez à jour la liste des groupes\r\n    } catch (error) {\r\n      console.error('Error removing password from group:', error);\r\n    }\r\n  };\r\n\r\n\r\n\r\n  return (\r\n      <>\r\n        <div className=\"content\">\r\n          <Row>\r\n            <Col md=\"12\">\r\n              <Card>\r\n                <CardHeader>PW Management</CardHeader>\r\n                <CardBody>\r\n                  <form>\r\n                    <label>\r\n                      PW Name:\r\n                      <input\r\n                          type=\"text\"\r\n                          name=\"name\"\r\n                          value={formData.name}\r\n                          onChange={handleInputChange}\r\n                      />\r\n                    </label>\r\n                    <label>\r\n                      Tooth Name:\r\n                      <br/>\r\n                      <select\r\n                          id=\"toothName\"\r\n                          name=\"toothName\"\r\n                          value={formDataT.name}\r\n                          onChange={handleInputChangeTooth}\r\n                      >\r\n                        <option value=\"\">Select a tooth</option>\r\n                        {toothOptions.map(tooth => (\r\n                            <option key={tooth.id} value={tooth.name}>\r\n                              {tooth.name}\r\n                            </option>\r\n                        ))}\r\n                      </select>\r\n                    </label>\r\n                    <label>\r\n                      Group Name:\r\n                      <br/>\r\n                      <select\r\n                          id=\"groupName\"\r\n                          name=\"groupName\"\r\n                          value={formDataG.name}\r\n                          // onChange={handleInputChangeGroup}\r\n                      >\r\n                        <option value=\"\">Select a group</option>\r\n                        {groups.map(group => (\r\n                            <option key={group.id} value={group.name}>\r\n                              {group.code}\r\n                            </option>\r\n                        ))}\r\n                      </select>\r\n                    </label>\r\n                    {/*<div>*/}\r\n                    {/*  Assign to Groups:*/}\r\n                    {/*  {groups.map(group => (*/}\r\n                    {/*      <label key={group.id}>*/}\r\n                    {/*        <input*/}\r\n                    {/*            type=\"checkbox\"*/}\r\n                    {/*            value={group.id}*/}\r\n                    {/*            checked={formData.groupIds.includes(group.id)}*/}\r\n                    {/*            onChange={() => handleGroupCheckboxChange(group.id)}*/}\r\n                    {/*        />*/}\r\n                    {/*        {group.code}*/}\r\n                    {/*      </label>*/}\r\n                    {/*  ))}*/}\r\n                    {/*</div>*/}\r\n                    <button type=\"button\" onClick={createOrUpdatePW}>\r\n                      {formData.id ? 'Update PW' : 'Add PW'}\r\n                    </button>\r\n                  </form>\r\n\r\n                  <DataTable\r\n\r\n                      title=\"PWs\"\r\n                      columns={columns}\r\n                      data={pws}\r\n                      pagination\r\n                      highlightOnHover\r\n                      className=\"table table-striped table-bordered\"\r\n                  />\r\n\r\n                  <div>\r\n                    <h4>Assign Passwords to Groups:</h4>\r\n\r\n\r\n                    <div className=\"mb-2\">\r\n                      <label className=\"me-2\">Select Group:</label>\r\n                      <select\r\n                          className=\"form-select\"\r\n                          value={selectedGroupId || ''}\r\n                          onChange={(e) => handleGroupSelectionChange(e.target.value)}\r\n                      >\r\n                        <option value={null}>Select Group</option>\r\n                        {groups.map(g => (\r\n                            <option key={g.id} value={g.id}>{g.code}</option>\r\n                        ))}\r\n                      </select>\r\n                    </div>\r\n                    <div className=\"mb-2\">\r\n                      <label className=\"me-2\">Select PW:</label>\r\n                      <select\r\n                          className=\"form-select\"\r\n                          value={selectedPWId || ''}\r\n                          onChange={(e) => handlePWSelectionChange(e.target.value)}\r\n                      >\r\n                        <option value={null}>Select Password</option>\r\n                        {pws.map(pw => (\r\n                            <option key={pw.id} value={pw.id}>{pw.name}</option>\r\n                        ))}\r\n                      </select>\r\n                    </div>\r\n                    <div>\r\n                      <button\r\n                          type=\"button\"\r\n                          className=\"btn btn-primary me-2\"\r\n                          onClick={() => {\r\n                            createOrUpdatePW(); // Create or update PW\r\n                            addPWToGroup(); // Assign password to group\r\n                          }}\r\n                      >\r\n                        Add Password\r\n                      </button>\r\n\r\n                    </div>\r\n                  </div>\r\n                  <div>\r\n                    <h4>Assigned PWs to Groups:</h4>\r\n                    {groups.map(group => (\r\n                        <div key={group.id} className=\"mb-3\">\r\n                          <h5>{group.code}:</h5>\r\n                          {groupedPWs[group.id] && groupedPWs[group.id].length > 0 ? (\r\n                              <ul>\r\n                                {groupedPWs[group.id].map(pw => (\r\n                                    <li key={pw.id}>{pw.name}</li>\r\n                                ))}\r\n                              </ul>\r\n                          ) : (\r\n                              <p>None</p>\r\n                          )}\r\n                        </div>\r\n                    ))}\r\n                  </div>\r\n\r\n\r\n                </CardBody>\r\n              </Card>\r\n            </Col>\r\n          </Row>\r\n        </div>\r\n      </>\r\n  );\r\n}\r\n\r\nexport default PWManagement;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}